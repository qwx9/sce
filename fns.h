void	clearmsg(Msg*);
Msg*	readnet(void);
void	initnet(char*);
int	parsemsg(Msg*);
void	endmsg(Msg*);
int	sendgather(Mobj*, Mobj*);
int	sendmovenear(Mobj*, Point, Mobj*);
int	sendstop(Mobj*);
int	sendmove(Mobj*, Point);
int	sendpause(void);
void	stepsnd(void);
void	initsnd(void);
void	linktomap(Mobj*);
int	pushreturncommand(Mobj*, Mobj*);
int	pushgathercommand(Mobj*, Mobj*);
int	pushmove(Mobj*);
int	pushmovecommand(Point, Mobj*, Mobj*);
void	resourcestate(Mobj*);
void	depleteresource(Mobj*, int);
void	freezefrm(Mobj*, int);
void	idlestate(Mobj*);
Mobj*	derefmobj(int, long);
void	nextstate(Mobj*);
void	clearcommands(Mobj*);
void	abortcommands(Mobj*);
Command*	pushcommand(Mobj*);
Mobjl*	linkmobj(Mobjl*, Mobj*, Mobjl*);
void	unlinkmobj(Mobjl*);
void	refmobj(Mobj*);
void	stepsim(void);
void	initsim(void);
void	initsv(int, char*);
void	flushcl(void);
void	packcl(char*, ...);
Msg*	getclbuf(void);
void	dopan(Point);
void	doselect(Point);
void	doaction(Point, int);
void	compose(int, int, u32int);
void	redraw(void);
void	updatefb(void);
void	resetfb(void);
void	drawfb(void);
void	initimg(void);
void	initfs(void);
double	octdist(Point, Point);
void	setgoal(Point*, Mobj*, Mobj*);
Mobj*	unitat(int, int);
int	isblocked(Point, Obj*);
void	markmobj(Mobj*, int);
int	isnextto(Mobj*, Mobj*);
int	findpath(Point, Mobj*);
void	drawnodemap(Rectangle, Mobj*);
Mobj*	mapspawn(Point, Obj*);
void	initmap(void);
Mobj*	derefmobj(int, long);
int	spawnunit(Point, Obj*, int);
int	spawnresource(Point, Obj*, int);
void	nukequeue(Pairheap**);
Pairheap*	popqueue(Pairheap**);
void	decreasekey(Pairheap*, double, Pairheap**);
void	pushqueue(Node*, Pairheap**);
int	lsb(uvlong);
int	msb(uvlong);
u64int*	baddr(int, int);
u64int*	rbaddr(int, int);
u64int*	bload(int, int, int, int, int, int, int, int);
void	bset(int, int, int, int, int);
void	initbmap(void);
int	mobjfmt(Fmt*);
void	dprint(char *, ...);
int	max(int, int);
int	min(int, int);
void	clearvec(Vector*, int);
void*	pushsparsevec(Vector*, void*);
void*	pushvec(Vector*, void*, int);
char*	estrdup(char*);
void*	erealloc(void*, ulong, ulong);
void*	emalloc(ulong);
vlong	flen(int);

#pragma	varargck	argpos	dprint	1
#pragma	varargck	type	"M"	Mobj*
